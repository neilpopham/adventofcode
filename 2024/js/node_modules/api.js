var fs = require("fs");
var path = require("path");

class AdventOfCodeLines {
  rows = null;

  constructor(rows) {
    this.rows = rows;
  }

  raw() {
    return this.rows;
  }

  regex(exp, slice = true) {
    var parsed = [];
    this.rows.forEach((row) => {
    	const match = row.match(exp)
      const simple = match == null ? null : match.map(v => v);
      parsed.push(slice ? simple.slice(1) : simple);
    });
    return parsed;
  }
}

class AdventOfCodeData {
  data = null;

  constructor(data) {
    this.data = data;
  }

  raw(trim = true) {
    return trim ? this.data.trim() : this.data;
  }

  lines(trim) {
    const data = this.raw().replace("/\r*\n/", "\n");
    return new AdventOfCodeLines(data.split("\n"));
  }
}

class AdventOfCode {
  YEAR = 2024;
  data_path = "data/{name}.txt";

  input(day) {
    const filename = this.calculatePath(day);
    const data = fs.readFileSync(filename, "utf8");
    return new AdventOfCodeData(data);
  }

  example(day, index) {
    const filename = this.calculatePath(`${day}.${index}`);
    const data = fs.readFileSync(filename, "utf8");
    return new AdventOfCodeData(data);
  }

  calculatePath(name) {
    name = this.data_path.replace("{name}", name);
    return path.join(__dirname, `../../libs/${name}`);
  }
}

module.exports = { AdventOfCode, AdventOfCodeData, AdventOfCodeLines }
